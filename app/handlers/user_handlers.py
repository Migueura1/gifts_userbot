from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command, StateFilter, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery, FSInputFile
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from pyrogram import Client

from typing import Dict, Any

from fsm import UserStates
from loguru import logger

from config import NOT_SET, MAX_CHANNELS_COUNT, default_logs_path

import os
import lexicon
from keyboards import create_inline_kb, create_channels_kb
from backend import validate_supply, validate_price_from, validate_price_to, validate_channel_id, validate_amount
from db import requests
from filters import AllowUserFilter

from backend.autobuy import autobuy_test, get_gifts_by_command


router = Router()
router.message.filter(AllowUserFilter())
router.callback_query.filter(AllowUserFilter())


start_kb = create_inline_kb(2,'test_autobuy', 'price_from', 'price_to', 'supply', 'link_channels')

@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await state.clear()

    await message.answer(
        text=await lexicon.start_page(),
        reply_markup=start_kb
    )


############################################################################
# ‚öôÔ∏è –ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–ê–†–ê–ú–ï–¢–†–û–í –°–ê–ü–ü–õ–ê–Ø –ò –¶–ï–ù–´
############################################################################
@router.callback_query(F.data == 'supply')
async def change_supply(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text=await lexicon.supply_page(),
        reply_markup=create_inline_kb(1, 'cancel', 'clear_supply')
    )

    await state.set_state(UserStates.fill_supply)


@router.callback_query(F.data == 'clear_supply')
async def clear_supply(callback: CallbackQuery, state: FSMContext):
    requests.update_supply_limit(NOT_SET)

    await callback.message.edit_text(
        text=await lexicon.start_page(),
        reply_markup=start_kb
    )

    await state.clear()


@router.message(StateFilter(UserStates.fill_supply))
async def fill_supply(message: Message, state: FSMContext):
    supply = await validate_supply(message)

    if not supply:
        await message.answer(
            text='‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑..',
            reply_markup=create_inline_kb(1, 'cancel')
        )
        return
    
    requests.update_supply_limit(supply)

    await message.answer(
            text=f'‚úÖ –°–∞–ø–ø–ª–∞–π –æ–±–Ω–æ–≤–ª–µ–Ω: <code>{supply} —à—Ç.</code>',
            reply_markup=create_inline_kb(1, 'ok')
        )
    
    await state.clear()


###############################################################
@router.callback_query(F.data == 'price_from')
async def change_price_from(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text=await lexicon.price_from_page(),
        reply_markup=create_inline_kb(1, 'cancel', 'clear_price_from')
    )

    await state.set_state(UserStates.fill_price_from)


@router.callback_query(F.data == 'clear_price_from')
async def clear_price_from(callback: CallbackQuery, state: FSMContext):
    requests.update_price_from(NOT_SET)

    await callback.message.edit_text(
        text=await lexicon.start_page(),
        reply_markup=start_kb
    )

    await state.clear()


@router.message(StateFilter(UserStates.fill_price_from))
async def fill_price_from(message: Message, state: FSMContext):
    price_from = await validate_price_from(message)

    if not price_from:
        await message.answer(
            text='‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑..',
            reply_markup=create_inline_kb(1, 'cancel')
        )
        return
    
    requests.update_price_from(price_from)

    await message.answer(
            text=f'‚úÖ –¶–µ–Ω–∞ –û–¢ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: <code>{price_from} ‚≠êÔ∏è</code>',
            reply_markup=create_inline_kb(1, 'ok')
        )
    
    await state.clear()


###############################################################
@router.callback_query(F.data == 'price_to')
async def change_price_to(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text=await lexicon.price_to_page(),
        reply_markup=create_inline_kb(1, 'cancel', 'clear_price_to')
    )

    await state.set_state(UserStates.fill_price_to)


@router.callback_query(F.data == 'clear_price_to')
async def clear_price_to(callback: CallbackQuery, state: FSMContext):
    requests.update_price_to(NOT_SET)

    await callback.message.edit_text(
        text=await lexicon.start_page(),
        reply_markup=start_kb
    )

    await state.clear()


@router.message(StateFilter(UserStates.fill_price_to))
async def fill_price_to(message: Message, state: FSMContext):
    price_to = await validate_price_to(message)

    if not price_to:
        await message.answer(
            text='‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑..',
            reply_markup=create_inline_kb(1, 'cancel')
        )
        return
    
    requests.update_price_to(price_to)

    await message.answer(
            text=f'‚úÖ –¶–µ–Ω–∞ –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∞: <code>{price_to} ‚≠êÔ∏è</code>',
            reply_markup=create_inline_kb(1, 'ok')
        )
    
    await state.clear()



############################################################################
# üîó –ü–†–ò–í–Ø–ó–ö–ê –ö–ê–ù–ê–õ–û–í
############################################################################
@router.callback_query(F.data == 'link_channels')
async def link_channels(callback: CallbackQuery):
    config = requests.load_config()

    await callback.message.edit_text(
        text=await lexicon.channels(config['linked_channels']),
        reply_markup=create_channels_kb(config['linked_channels'])
    )


@router.callback_query(F.data.startswith('channel_'))
async def channel_(callback: CallbackQuery):
    id = callback.data.split('_')[-1]
    
    await callback.message.edit_text(
        text=await lexicon.channel_(id),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f'–û—Ç–≤—è–∑–∞—Ç—å', callback_data=f'unlink_{id}')],
            [InlineKeyboardButton(text=f'üèò –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data=f'cancel')],
        ])
    )


@router.callback_query(F.data.startswith('unlink_'))
async def channel_(callback: CallbackQuery):
    id = callback.data.split('_')[-1]

    requests.remove_channel(id)

    await link_channels(callback)


@router.callback_query(F.data == 'add_channel')
async def add_channel(callback: CallbackQuery, state: FSMContext):
    config = requests.load_config()
    if len(config['linked_channels']) >= MAX_CHANNELS_COUNT:
        await callback.answer(
            text=f'–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {MAX_CHANNELS_COUNT}',
            show_alert=True
        )
        return
    
    await callback.message.edit_text(
        text=await lexicon.add_channel(),
        reply_markup=create_inline_kb(1, 'cancel')
    )

    await state.set_state(UserStates.fill_channel)


@router.message(StateFilter(UserStates.fill_channel))
async def fill_channel(message: Message, bot: Bot, state: FSMContext):
    channel_id = await validate_channel_id(message)

    if not channel_id:
        await message.answer(
            text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=create_inline_kb(1, 'cancel')
        )
        return

    else:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª
        try:
            linked_group = await bot.get_chat(chat_id=channel_id)
            
            if linked_group.type != 'channel':
                await message.answer(
                    text="–≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª.",
                    reply_markup=create_inline_kb(1, 'cancel')
                )
                return
        except Exception as e:
            await message.answer(
                text='–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É',
                reply_markup=create_inline_kb(1, 'cancel')
            )
            return
        
        config = requests.load_config()
        if channel_id in config["linked_channels"]:
            await message.answer(
                text="–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω.",
                reply_markup=create_inline_kb(1, 'cancel')
            )
            return 

        channel_name = linked_group.title
        requests.add_channel(channel_id, channel_name)

        await message.answer(
            text=f'‚úÖ –ö–∞–Ω–∞–ª –ø—Ä–∏–≤—è–∑–∞–Ω: <code>{channel_name}[{channel_id}]</code>',
            reply_markup=create_inline_kb(1, 'ok')
        )

        await state.clear()    


############################################################################
# ‚≠êÔ∏è –†–ï–§–ê–ù–î
############################################################################
@router.message(Command("refund"))
async def cmd_refund(
    message: Message,
    bot: Bot,
    command: CommandObject,
):
    transaction_id = command.args
    if transaction_id is None:
        await message.answer(
            text='–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ Id —Ç—Ä–∞–Ω–∑—ã',
            reply_markup=create_inline_kb(1, 'ok')
        )
        return
    try:
        await bot.refund_star_payment(
            user_id=message.from_user.id,
            telegram_payment_charge_id=transaction_id
        )
        await message.answer(
            text='refunded',
            reply_markup=create_inline_kb(1, 'ok')
        )

        logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç.")
    except TelegramBadRequest as error:
        if "CHARGE_NOT_FOUND" in error.message:
            text = 'refund-code-not-found'
        elif "CHARGE_ALREADY_REFUNDED" in error.message:
            text = "refund-already-refunded"
        else:
            # –ü—Ä–∏ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö ‚Äì —Ç–∞–∫–æ–π –∂–µ —Ç–µ–∫—Å—Ç,
            # –∫–∞–∫ –∏ –≤ –ø–µ—Ä–≤–æ–º —Å–ª—É—á–∞–µ
            text = "refund-code-not-found"
        await message.answer(text, reply_markup=create_inline_kb(1, 'ok'))
        return
    
############################################################################
# /gifts
############################################################################
@router.message(Command('gifts'))
async def get_gifts(message: Message, **data: Dict[str, Any]):
    await message.answer(
        text='<b>–ü–æ–ª—É—á–∞—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏</b>'
    )

    client: Client = data["client"]

    gifts = await get_gifts_by_command(client)

    text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:\n\n"

    for g in gifts:
        text += f"{g.sticker.emoji} | {g.id} | {g.price}\n"
    
    await message.answer(
        text=text
    )


############################################################################
# üì• –í–´–ì–†–£–ó–ö–ê –õ–û–ì–û–í
############################################################################
@router.message(Command('logs'))
async def logs_dump(message: Message):
    log_dir = default_logs_path
    files = ["info.log", "errors.log"]

    for filename in files:
        path = os.path.join(log_dir, filename)
        if os.path.exists(path):
            await message.answer_document(document=FSInputFile(path))
        else:
            await message.answer(f"–§–∞–π–ª <code>{filename}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.")

############################################################################
# üéÅ –¢–ï–°–¢ –°–ù–ê–ô–ü–ï–†–ê
############################################################################
@router.callback_query(F.data == 'test_autobuy')
async def test_autobuy(callback: CallbackQuery):
    await callback.message.answer(
        text='<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–Ω–∞–π–ø–µ—Ä–∞?</b>\n\n<blockquote>–ë–æ—Ç –∫—É–ø–∏—Ç 3 üß∏ –ø–æ 15 ‚≠êÔ∏è —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞</blockquote>',
        reply_markup=create_inline_kb(2, 'start_test', 'cancel')
    )


@router.callback_query(F.data == 'start_test')
async def start_test(callback: CallbackQuery, **data: Dict[str, Any]):
    await callback.message.edit_text(
        text='<b>–ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..</b>'
    )

    client: Client = data["client"]

    await autobuy_test(client)

    await callback.message.edit_text(
        text='<b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –∏ –∫–∞–Ω–∞–ª—ã/–ø—Ä–æ—Ñ–∏–ª—å.</b>'
    )

############################################################################
# ‚ùå –û–¢–ú–ï–ù–ê –∏ –û–ö–ï–ô
############################################################################
@router.callback_query(F.data == 'cancel')
@router.callback_query(F.data == 'ok')
async def process_profile_back(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        text=await lexicon.start_page(),
        reply_markup=start_kb
    )

    await state.clear()



    

